#!/usr/bin/env python3
import asyncio
from grader.tcp import Servidor
import re


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)
    padrao = b'(?<=\r\n)'
    dados = [substring for substring in re.split(padrao, dados)]

    for dado in dados: 
        #teste 2
        if dado.endswith(b'\r\n'): 
            dado = conexao.residuais + dado
            
            #teste 1
            if dado.startswith(b'PING'):
               dado = dado.replace(b'PING ', b'')
               conexao.enviar(b':server PONG server :' + dado)
            #teste 3
            elif dado.startswith(b'NICK'):
                nick =  dado.replace(b'NICK ', b'').replace(b'\r\n', b'')
                if not(validar_nome(nick)):
                    conexao.enviar(b':server 432 * %s :Erroneous nickname\r\n' % nick)
                else:
                    if nick.lower() in apelidos:
                        if conexao.apelido != b'':
                            conexao.enviar(b':server 433 %s %s :Nickname is already in use\r\n' % (conexao.apelido, nick))
                        else:
                            conexao.enviar(b':server 433 * %s :Nickname is already in use\r\n' % nick)
                    #teste 4
                    else:
                        if conexao.apelido != b'':
                            conexao.enviar(b':%s NICK %s\r\n' % (conexao.apelido, nick))
                            del apelidos[conexao.apelido.lower()]
                        else:
                            conexao.enviar(b':server 001 %s :Welcome\r\n' % nick)
                            conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' % nick)
                            
                        apelidos[nick.lower()] = conexao
                        conexao.apelido = nick
            #teste 5            
            elif dado.startswith(b'PRIVMSG'):
                 privmsg = dado.replace(b'PRIVMSG ', b'').replace(b'\r\n', b'')
                 destinatario, mensagem = privmsg.split(b' :', 1)
                 origem = conexao.apelido
                 if destinatario is not None:
                     if destinatario.lower() in apelidos:
                         apelidos[destinatario.lower()].enviar(b':%s PRIVMSG %s :%s\r\n' % (origem, destinatario, mensagem))
                 if dado.startswith(b'#'):
                      canal = dado.replace(b'#', b'')
                      if canal in canais[canal]:
                           for usuario in canais[canal]:
                               if usuario != conexao:
                                    usuario.enviar(b':%s PRIVMSG %s :%s\r\n' % (origem, b'#' + canal, mensagem))

            else:
                return sair(conexao)

            print(conexao, dado)    
            conexao.residuais = b''
            
        else:
            conexao.residuais += dado

    if conexao.residuais.endswith(b'\r\n'):
        conexao.enviar(b':server PONG server :' + conexao.residuais.replace(b'PING ', b''))
        conexao.residuais = b''
        
        print(conexao, d)
        print(conexao, dado)

def conexao_aceita(conexao):
    conexao.residuais = b''
    conexao.apelidos = b'' 
    conexao.apelido = b'' 
    conexao.canal = []
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)

canais = {}
apelidos = {}
servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
